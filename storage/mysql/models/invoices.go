// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invoice is an object representing the database table.
type Invoice struct {
	ID                 uint           `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID             uint           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	InvoiceNumber      string         `boil:"invoice_number" json:"invoice_number" toml:"invoice_number" yaml:"invoice_number"`
	PoNumber           string         `boil:"po_number" json:"po_number" toml:"po_number" yaml:"po_number"`
	Currency           string         `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	DueDate            time.Time      `boil:"due_date" json:"due_date" toml:"due_date" yaml:"due_date"`
	Message            string         `boil:"message" json:"message" toml:"message" yaml:"message"`
	BillToFirstName    string         `boil:"bill_to_first_name" json:"bill_to_first_name" toml:"bill_to_first_name" yaml:"bill_to_first_name"`
	BillToLastName     string         `boil:"bill_to_last_name" json:"bill_to_last_name" toml:"bill_to_last_name" yaml:"bill_to_last_name"`
	BillToCompany      string         `boil:"bill_to_company" json:"bill_to_company" toml:"bill_to_company" yaml:"bill_to_company"`
	BillToAddressLine1 string         `boil:"bill_to_address_line_1" json:"bill_to_address_line_1" toml:"bill_to_address_line_1" yaml:"bill_to_address_line_1"`
	BillToAddressLine2 string         `boil:"bill_to_address_line_2" json:"bill_to_address_line_2" toml:"bill_to_address_line_2" yaml:"bill_to_address_line_2"`
	BillToCity         string         `boil:"bill_to_city" json:"bill_to_city" toml:"bill_to_city" yaml:"bill_to_city"`
	BillToState        string         `boil:"bill_to_state" json:"bill_to_state" toml:"bill_to_state" yaml:"bill_to_state"`
	BillToPostalCode   string         `boil:"bill_to_postal_code" json:"bill_to_postal_code" toml:"bill_to_postal_code" yaml:"bill_to_postal_code"`
	BillToCountry      string         `boil:"bill_to_country" json:"bill_to_country" toml:"bill_to_country" yaml:"bill_to_country"`
	BillToEmail        string         `boil:"bill_to_email" json:"bill_to_email" toml:"bill_to_email" yaml:"bill_to_email"`
	BillToPhone        string         `boil:"bill_to_phone" json:"bill_to_phone" toml:"bill_to_phone" yaml:"bill_to_phone"`
	PayToFirstName     string         `boil:"pay_to_first_name" json:"pay_to_first_name" toml:"pay_to_first_name" yaml:"pay_to_first_name"`
	PayToLastName      string         `boil:"pay_to_last_name" json:"pay_to_last_name" toml:"pay_to_last_name" yaml:"pay_to_last_name"`
	PayToCompany       string         `boil:"pay_to_company" json:"pay_to_company" toml:"pay_to_company" yaml:"pay_to_company"`
	PayToAddressLine1  string         `boil:"pay_to_address_line_1" json:"pay_to_address_line_1" toml:"pay_to_address_line_1" yaml:"pay_to_address_line_1"`
	PayToAddressLine2  string         `boil:"pay_to_address_line_2" json:"pay_to_address_line_2" toml:"pay_to_address_line_2" yaml:"pay_to_address_line_2"`
	PayToCity          string         `boil:"pay_to_city" json:"pay_to_city" toml:"pay_to_city" yaml:"pay_to_city"`
	PayToState         string         `boil:"pay_to_state" json:"pay_to_state" toml:"pay_to_state" yaml:"pay_to_state"`
	PayToPostalCode    string         `boil:"pay_to_postal_code" json:"pay_to_postal_code" toml:"pay_to_postal_code" yaml:"pay_to_postal_code"`
	PayToCountry       string         `boil:"pay_to_country" json:"pay_to_country" toml:"pay_to_country" yaml:"pay_to_country"`
	PayToEmail         string         `boil:"pay_to_email" json:"pay_to_email" toml:"pay_to_email" yaml:"pay_to_email"`
	PayToPhone         string         `boil:"pay_to_phone" json:"pay_to_phone" toml:"pay_to_phone" yaml:"pay_to_phone"`
	TaxRate            string         `boil:"tax_rate" json:"tax_rate" toml:"tax_rate" yaml:"tax_rate"`
	AmountDue          uint           `boil:"amount_due" json:"amount_due" toml:"amount_due" yaml:"amount_due"`
	AmountPaid         uint           `boil:"amount_paid" json:"amount_paid" toml:"amount_paid" yaml:"amount_paid"`
	Status             InvoicesStatus `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *invoiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceColumns = struct {
	ID                 string
	UserID             string
	InvoiceNumber      string
	PoNumber           string
	Currency           string
	DueDate            string
	Message            string
	BillToFirstName    string
	BillToLastName     string
	BillToCompany      string
	BillToAddressLine1 string
	BillToAddressLine2 string
	BillToCity         string
	BillToState        string
	BillToPostalCode   string
	BillToCountry      string
	BillToEmail        string
	BillToPhone        string
	PayToFirstName     string
	PayToLastName      string
	PayToCompany       string
	PayToAddressLine1  string
	PayToAddressLine2  string
	PayToCity          string
	PayToState         string
	PayToPostalCode    string
	PayToCountry       string
	PayToEmail         string
	PayToPhone         string
	TaxRate            string
	AmountDue          string
	AmountPaid         string
	Status             string
}{
	ID:                 "id",
	UserID:             "user_id",
	InvoiceNumber:      "invoice_number",
	PoNumber:           "po_number",
	Currency:           "currency",
	DueDate:            "due_date",
	Message:            "message",
	BillToFirstName:    "bill_to_first_name",
	BillToLastName:     "bill_to_last_name",
	BillToCompany:      "bill_to_company",
	BillToAddressLine1: "bill_to_address_line_1",
	BillToAddressLine2: "bill_to_address_line_2",
	BillToCity:         "bill_to_city",
	BillToState:        "bill_to_state",
	BillToPostalCode:   "bill_to_postal_code",
	BillToCountry:      "bill_to_country",
	BillToEmail:        "bill_to_email",
	BillToPhone:        "bill_to_phone",
	PayToFirstName:     "pay_to_first_name",
	PayToLastName:      "pay_to_last_name",
	PayToCompany:       "pay_to_company",
	PayToAddressLine1:  "pay_to_address_line_1",
	PayToAddressLine2:  "pay_to_address_line_2",
	PayToCity:          "pay_to_city",
	PayToState:         "pay_to_state",
	PayToPostalCode:    "pay_to_postal_code",
	PayToCountry:       "pay_to_country",
	PayToEmail:         "pay_to_email",
	PayToPhone:         "pay_to_phone",
	TaxRate:            "tax_rate",
	AmountDue:          "amount_due",
	AmountPaid:         "amount_paid",
	Status:             "status",
}

var InvoiceTableColumns = struct {
	ID                 string
	UserID             string
	InvoiceNumber      string
	PoNumber           string
	Currency           string
	DueDate            string
	Message            string
	BillToFirstName    string
	BillToLastName     string
	BillToCompany      string
	BillToAddressLine1 string
	BillToAddressLine2 string
	BillToCity         string
	BillToState        string
	BillToPostalCode   string
	BillToCountry      string
	BillToEmail        string
	BillToPhone        string
	PayToFirstName     string
	PayToLastName      string
	PayToCompany       string
	PayToAddressLine1  string
	PayToAddressLine2  string
	PayToCity          string
	PayToState         string
	PayToPostalCode    string
	PayToCountry       string
	PayToEmail         string
	PayToPhone         string
	TaxRate            string
	AmountDue          string
	AmountPaid         string
	Status             string
}{
	ID:                 "invoices.id",
	UserID:             "invoices.user_id",
	InvoiceNumber:      "invoices.invoice_number",
	PoNumber:           "invoices.po_number",
	Currency:           "invoices.currency",
	DueDate:            "invoices.due_date",
	Message:            "invoices.message",
	BillToFirstName:    "invoices.bill_to_first_name",
	BillToLastName:     "invoices.bill_to_last_name",
	BillToCompany:      "invoices.bill_to_company",
	BillToAddressLine1: "invoices.bill_to_address_line_1",
	BillToAddressLine2: "invoices.bill_to_address_line_2",
	BillToCity:         "invoices.bill_to_city",
	BillToState:        "invoices.bill_to_state",
	BillToPostalCode:   "invoices.bill_to_postal_code",
	BillToCountry:      "invoices.bill_to_country",
	BillToEmail:        "invoices.bill_to_email",
	BillToPhone:        "invoices.bill_to_phone",
	PayToFirstName:     "invoices.pay_to_first_name",
	PayToLastName:      "invoices.pay_to_last_name",
	PayToCompany:       "invoices.pay_to_company",
	PayToAddressLine1:  "invoices.pay_to_address_line_1",
	PayToAddressLine2:  "invoices.pay_to_address_line_2",
	PayToCity:          "invoices.pay_to_city",
	PayToState:         "invoices.pay_to_state",
	PayToPostalCode:    "invoices.pay_to_postal_code",
	PayToCountry:       "invoices.pay_to_country",
	PayToEmail:         "invoices.pay_to_email",
	PayToPhone:         "invoices.pay_to_phone",
	TaxRate:            "invoices.tax_rate",
	AmountDue:          "invoices.amount_due",
	AmountPaid:         "invoices.amount_paid",
	Status:             "invoices.status",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperInvoicesStatus struct{ field string }

func (w whereHelperInvoicesStatus) EQ(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperInvoicesStatus) NEQ(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperInvoicesStatus) LT(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperInvoicesStatus) LTE(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperInvoicesStatus) GT(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperInvoicesStatus) GTE(x InvoicesStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperInvoicesStatus) IN(slice []InvoicesStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperInvoicesStatus) NIN(slice []InvoicesStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var InvoiceWhere = struct {
	ID                 whereHelperuint
	UserID             whereHelperuint
	InvoiceNumber      whereHelperstring
	PoNumber           whereHelperstring
	Currency           whereHelperstring
	DueDate            whereHelpertime_Time
	Message            whereHelperstring
	BillToFirstName    whereHelperstring
	BillToLastName     whereHelperstring
	BillToCompany      whereHelperstring
	BillToAddressLine1 whereHelperstring
	BillToAddressLine2 whereHelperstring
	BillToCity         whereHelperstring
	BillToState        whereHelperstring
	BillToPostalCode   whereHelperstring
	BillToCountry      whereHelperstring
	BillToEmail        whereHelperstring
	BillToPhone        whereHelperstring
	PayToFirstName     whereHelperstring
	PayToLastName      whereHelperstring
	PayToCompany       whereHelperstring
	PayToAddressLine1  whereHelperstring
	PayToAddressLine2  whereHelperstring
	PayToCity          whereHelperstring
	PayToState         whereHelperstring
	PayToPostalCode    whereHelperstring
	PayToCountry       whereHelperstring
	PayToEmail         whereHelperstring
	PayToPhone         whereHelperstring
	TaxRate            whereHelperstring
	AmountDue          whereHelperuint
	AmountPaid         whereHelperuint
	Status             whereHelperInvoicesStatus
}{
	ID:                 whereHelperuint{field: "`invoices`.`id`"},
	UserID:             whereHelperuint{field: "`invoices`.`user_id`"},
	InvoiceNumber:      whereHelperstring{field: "`invoices`.`invoice_number`"},
	PoNumber:           whereHelperstring{field: "`invoices`.`po_number`"},
	Currency:           whereHelperstring{field: "`invoices`.`currency`"},
	DueDate:            whereHelpertime_Time{field: "`invoices`.`due_date`"},
	Message:            whereHelperstring{field: "`invoices`.`message`"},
	BillToFirstName:    whereHelperstring{field: "`invoices`.`bill_to_first_name`"},
	BillToLastName:     whereHelperstring{field: "`invoices`.`bill_to_last_name`"},
	BillToCompany:      whereHelperstring{field: "`invoices`.`bill_to_company`"},
	BillToAddressLine1: whereHelperstring{field: "`invoices`.`bill_to_address_line_1`"},
	BillToAddressLine2: whereHelperstring{field: "`invoices`.`bill_to_address_line_2`"},
	BillToCity:         whereHelperstring{field: "`invoices`.`bill_to_city`"},
	BillToState:        whereHelperstring{field: "`invoices`.`bill_to_state`"},
	BillToPostalCode:   whereHelperstring{field: "`invoices`.`bill_to_postal_code`"},
	BillToCountry:      whereHelperstring{field: "`invoices`.`bill_to_country`"},
	BillToEmail:        whereHelperstring{field: "`invoices`.`bill_to_email`"},
	BillToPhone:        whereHelperstring{field: "`invoices`.`bill_to_phone`"},
	PayToFirstName:     whereHelperstring{field: "`invoices`.`pay_to_first_name`"},
	PayToLastName:      whereHelperstring{field: "`invoices`.`pay_to_last_name`"},
	PayToCompany:       whereHelperstring{field: "`invoices`.`pay_to_company`"},
	PayToAddressLine1:  whereHelperstring{field: "`invoices`.`pay_to_address_line_1`"},
	PayToAddressLine2:  whereHelperstring{field: "`invoices`.`pay_to_address_line_2`"},
	PayToCity:          whereHelperstring{field: "`invoices`.`pay_to_city`"},
	PayToState:         whereHelperstring{field: "`invoices`.`pay_to_state`"},
	PayToPostalCode:    whereHelperstring{field: "`invoices`.`pay_to_postal_code`"},
	PayToCountry:       whereHelperstring{field: "`invoices`.`pay_to_country`"},
	PayToEmail:         whereHelperstring{field: "`invoices`.`pay_to_email`"},
	PayToPhone:         whereHelperstring{field: "`invoices`.`pay_to_phone`"},
	TaxRate:            whereHelperstring{field: "`invoices`.`tax_rate`"},
	AmountDue:          whereHelperuint{field: "`invoices`.`amount_due`"},
	AmountPaid:         whereHelperuint{field: "`invoices`.`amount_paid`"},
	Status:             whereHelperInvoicesStatus{field: "`invoices`.`status`"},
}

// InvoiceRels is where relationship names are stored.
var InvoiceRels = struct {
}{}

// invoiceR is where relationships are stored.
type invoiceR struct {
}

// NewStruct creates a new relationship struct
func (*invoiceR) NewStruct() *invoiceR {
	return &invoiceR{}
}

// invoiceL is where Load methods for each relationship are stored.
type invoiceL struct{}

var (
	invoiceAllColumns            = []string{"id", "user_id", "invoice_number", "po_number", "currency", "due_date", "message", "bill_to_first_name", "bill_to_last_name", "bill_to_company", "bill_to_address_line_1", "bill_to_address_line_2", "bill_to_city", "bill_to_state", "bill_to_postal_code", "bill_to_country", "bill_to_email", "bill_to_phone", "pay_to_first_name", "pay_to_last_name", "pay_to_company", "pay_to_address_line_1", "pay_to_address_line_2", "pay_to_city", "pay_to_state", "pay_to_postal_code", "pay_to_country", "pay_to_email", "pay_to_phone", "tax_rate", "amount_due", "amount_paid", "status"}
	invoiceColumnsWithoutDefault = []string{"id", "user_id", "invoice_number", "po_number", "currency", "due_date", "message", "bill_to_first_name", "bill_to_last_name", "bill_to_company", "bill_to_address_line_1", "bill_to_address_line_2", "bill_to_city", "bill_to_state", "bill_to_postal_code", "bill_to_country", "bill_to_email", "bill_to_phone", "pay_to_first_name", "pay_to_last_name", "pay_to_company", "pay_to_address_line_1", "pay_to_address_line_2", "pay_to_city", "pay_to_state", "pay_to_postal_code", "pay_to_country", "pay_to_email", "pay_to_phone", "tax_rate", "amount_due", "amount_paid", "status"}
	invoiceColumnsWithDefault    = []string{}
	invoicePrimaryKeyColumns     = []string{"id"}
	invoiceGeneratedColumns      = []string{}
)

type (
	// InvoiceSlice is an alias for a slice of pointers to Invoice.
	// This should almost always be used instead of []Invoice.
	InvoiceSlice []*Invoice
	// InvoiceHook is the signature for custom Invoice hook methods
	InvoiceHook func(context.Context, boil.ContextExecutor, *Invoice) error

	invoiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceType                 = reflect.TypeOf(&Invoice{})
	invoiceMapping              = queries.MakeStructMapping(invoiceType)
	invoicePrimaryKeyMapping, _ = queries.BindMapping(invoiceType, invoiceMapping, invoicePrimaryKeyColumns)
	invoiceInsertCacheMut       sync.RWMutex
	invoiceInsertCache          = make(map[string]insertCache)
	invoiceUpdateCacheMut       sync.RWMutex
	invoiceUpdateCache          = make(map[string]updateCache)
	invoiceUpsertCacheMut       sync.RWMutex
	invoiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceAfterSelectMu sync.Mutex
var invoiceAfterSelectHooks []InvoiceHook

var invoiceBeforeInsertMu sync.Mutex
var invoiceBeforeInsertHooks []InvoiceHook
var invoiceAfterInsertMu sync.Mutex
var invoiceAfterInsertHooks []InvoiceHook

var invoiceBeforeUpdateMu sync.Mutex
var invoiceBeforeUpdateHooks []InvoiceHook
var invoiceAfterUpdateMu sync.Mutex
var invoiceAfterUpdateHooks []InvoiceHook

var invoiceBeforeDeleteMu sync.Mutex
var invoiceBeforeDeleteHooks []InvoiceHook
var invoiceAfterDeleteMu sync.Mutex
var invoiceAfterDeleteHooks []InvoiceHook

var invoiceBeforeUpsertMu sync.Mutex
var invoiceBeforeUpsertHooks []InvoiceHook
var invoiceAfterUpsertMu sync.Mutex
var invoiceAfterUpsertHooks []InvoiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invoice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invoice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invoice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invoice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invoice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invoice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invoice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invoice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invoice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceHook registers your hook function for all future operations.
func AddInvoiceHook(hookPoint boil.HookPoint, invoiceHook InvoiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceAfterSelectMu.Lock()
		invoiceAfterSelectHooks = append(invoiceAfterSelectHooks, invoiceHook)
		invoiceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceBeforeInsertMu.Lock()
		invoiceBeforeInsertHooks = append(invoiceBeforeInsertHooks, invoiceHook)
		invoiceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceAfterInsertMu.Lock()
		invoiceAfterInsertHooks = append(invoiceAfterInsertHooks, invoiceHook)
		invoiceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceBeforeUpdateMu.Lock()
		invoiceBeforeUpdateHooks = append(invoiceBeforeUpdateHooks, invoiceHook)
		invoiceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceAfterUpdateMu.Lock()
		invoiceAfterUpdateHooks = append(invoiceAfterUpdateHooks, invoiceHook)
		invoiceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceBeforeDeleteMu.Lock()
		invoiceBeforeDeleteHooks = append(invoiceBeforeDeleteHooks, invoiceHook)
		invoiceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceAfterDeleteMu.Lock()
		invoiceAfterDeleteHooks = append(invoiceAfterDeleteHooks, invoiceHook)
		invoiceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceBeforeUpsertMu.Lock()
		invoiceBeforeUpsertHooks = append(invoiceBeforeUpsertHooks, invoiceHook)
		invoiceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceAfterUpsertMu.Lock()
		invoiceAfterUpsertHooks = append(invoiceAfterUpsertHooks, invoiceHook)
		invoiceAfterUpsertMu.Unlock()
	}
}

// One returns a single invoice record from the query.
func (q invoiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invoice, error) {
	o := &Invoice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Invoice records from the query.
func (q invoiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSlice, error) {
	var o []*Invoice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invoice slice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Invoice records in the query.
func (q invoiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoices exists")
	}

	return count > 0, nil
}

// Invoices retrieves all the records using an executor.
func Invoices(mods ...qm.QueryMod) invoiceQuery {
	mods = append(mods, qm.From("`invoices`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`invoices`.*"})
	}

	return invoiceQuery{q}
}

// FindInvoice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoice(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Invoice, error) {
	invoiceObj := &Invoice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `invoices` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoices")
	}

	if err = invoiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceObj, err
	}

	return invoiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invoice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceInsertCacheMut.RLock()
	cache, cached := invoiceInsertCache[key]
	invoiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `invoices` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `invoices` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `invoices` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, invoicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoices")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for invoices")
	}

CacheNoHooks:
	if !cached {
		invoiceInsertCacheMut.Lock()
		invoiceInsertCache[key] = cache
		invoiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Invoice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invoice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceUpdateCacheMut.RLock()
	cache, cached := invoiceUpdateCache[key]
	invoiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `invoices` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, invoicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, append(wl, invoicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoices")
	}

	if !cached {
		invoiceUpdateCacheMut.Lock()
		invoiceUpdateCache[key] = cache
		invoiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `invoices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, invoicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoice")
	}
	return rowsAff, nil
}

var mySQLInvoiceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invoice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInvoiceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceUpsertCacheMut.RLock()
	cache, cached := invoiceUpsertCache[key]
	invoiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert invoices, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`invoices`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `invoices` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for invoices")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(invoiceType, invoiceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for invoices")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for invoices")
	}

CacheNoHooks:
	if !cached {
		invoiceUpsertCacheMut.Lock()
		invoiceUpsertCache[key] = cache
		invoiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Invoice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invoice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invoice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoicePrimaryKeyMapping)
	sql := "DELETE FROM `invoices` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `invoices` WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 0, invoicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoices")
	}

	if len(invoiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invoice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `invoices`.* FROM `invoices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, invoicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceSlice")
	}

	*o = slice

	return nil
}

// InvoiceExists checks if the Invoice row exists.
func InvoiceExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `invoices` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoices exists")
	}

	return exists, nil
}

// Exists checks if the Invoice row exists.
func (o *Invoice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceExists(ctx, exec, o.ID)
}
