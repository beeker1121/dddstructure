// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type InvoicesStatus string

// Enum values for InvoicesStatus
const (
	InvoicesStatusPending InvoicesStatus = "pending"
)

func AllInvoicesStatus() []InvoicesStatus {
	return []InvoicesStatus{
		InvoicesStatusPending,
	}
}

func (e InvoicesStatus) IsValid() error {
	switch e {
	case InvoicesStatusPending:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e InvoicesStatus) String() string {
	return string(e)
}

func (e InvoicesStatus) Ordinal() int {
	switch e {
	case InvoicesStatusPending:
		return 0

	default:
		panic(errors.New("enum is not valid"))
	}
}

type TransactionsType string

// Enum values for TransactionsType
const (
	TransactionsTypeAuthorize TransactionsType = "authorize"
	TransactionsTypeCapture   TransactionsType = "capture"
	TransactionsTypeSale      TransactionsType = "sale"
	TransactionsTypeVoid      TransactionsType = "void"
	TransactionsTypeRefund    TransactionsType = "refund"
)

func AllTransactionsType() []TransactionsType {
	return []TransactionsType{
		TransactionsTypeAuthorize,
		TransactionsTypeCapture,
		TransactionsTypeSale,
		TransactionsTypeVoid,
		TransactionsTypeRefund,
	}
}

func (e TransactionsType) IsValid() error {
	switch e {
	case TransactionsTypeAuthorize, TransactionsTypeCapture, TransactionsTypeSale, TransactionsTypeVoid, TransactionsTypeRefund:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e TransactionsType) String() string {
	return string(e)
}

func (e TransactionsType) Ordinal() int {
	switch e {
	case TransactionsTypeAuthorize:
		return 0
	case TransactionsTypeCapture:
		return 1
	case TransactionsTypeSale:
		return 2
	case TransactionsTypeVoid:
		return 3
	case TransactionsTypeRefund:
		return 4

	default:
		panic(errors.New("enum is not valid"))
	}
}

type TransactionsStatus string

// Enum values for TransactionsStatus
const (
	TransactionsStatusApproved TransactionsStatus = "approved"
	TransactionsStatusDeclined TransactionsStatus = "declined"
)

func AllTransactionsStatus() []TransactionsStatus {
	return []TransactionsStatus{
		TransactionsStatusApproved,
		TransactionsStatusDeclined,
	}
}

func (e TransactionsStatus) IsValid() error {
	switch e {
	case TransactionsStatusApproved, TransactionsStatusDeclined:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e TransactionsStatus) String() string {
	return string(e)
}

func (e TransactionsStatus) Ordinal() int {
	switch e {
	case TransactionsStatusApproved:
		return 0
	case TransactionsStatusDeclined:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}
